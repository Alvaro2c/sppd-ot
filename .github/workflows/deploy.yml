# name: CI and Deploy to GitHub Pages

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# permissions:
#   contents: read
#   pages: write
#   id-token: write

# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# jobs:
#   html-validation:
#     name: HTML Validation
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#       - run: npm install -g html-validate
#       - run: |
#           html-validate index.html
#           html-validate data.html
#           html-validate about.html
#           html-validate faq.html

#   css-validation:
#     name: CSS Validation
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#       - run: npm install -g stylelint stylelint-config-standard
#       - run: |
#           echo '{
#             "extends": "stylelint-config-standard",
#             "rules": {
#               "no-descending-specificity": null,
#               "selector-pseudo-element-no-unknown": [
#                 true,
#                 { "ignorePseudoElements": ["v-deep"] }
#               ]
#             }
#           }' > .stylelintrc.json
#       - run: stylelint "css/*.css"

#   js-linting:
#     name: JavaScript Linting
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#       - run: npm install -g eslint
#       - run: |
#           echo '{
#             "env": { "browser": true, "es2021": true },
#             "extends": "eslint:recommended",
#             "parserOptions": { "ecmaVersion": "latest", "sourceType": "module" },
#             "rules": { "no-unused-vars": "warn", "no-console": "off" }
#           }' > .eslintrc.json
#       - run: eslint "js/*.js"

#   json-validation:
#     name: JSON Validation
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Validate JSON data
#         run: python3 -m json.tool data/open_tenders.json > /dev/null

#   security:
#     name: Security Scanning
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - run: |
#           echo "üîç Checking for security issues..."
#           if grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude=*.md; then
#             echo "‚ö†Ô∏è  Potential secrets found in code"; exit 1; fi
#           if grep -r "eval\|innerHTML\|document\.write" js/; then
#             echo "‚ö†Ô∏è  Potentially dangerous JavaScript patterns found"; exit 1; fi
#           echo "‚úÖ Security scan completed"

#   file-size:
#     name: File Size Check
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - run: |
#           for file in *.html; do size=$(stat -c%s "$file"); if [ $size -gt 500000 ]; then echo "‚ö†Ô∏è  $file is larger than 500KB ($size bytes)"; exit 1; fi; done
#           for file in css/*.css; do size=$(stat -c%s "$file"); if [ $size -gt 1000000 ]; then echo "‚ö†Ô∏è  $file is larger than 1MB ($size bytes)"; exit 1; fi; done
#           for file in js/*.js; do size=$(stat -c%s "$file"); if [ $size -gt 500000 ]; then echo "‚ö†Ô∏è  $file is larger than 500KB ($size bytes)"; exit 1; fi; done

#   data-integrity:
#     name: Data Integrity Check
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#       - name: Validate data structure
#         run: |
#           node -e "
#           const data = JSON.parse(fs.readFileSync('data/open_tenders.json', 'utf8'));
#           if (!Array.isArray(data)) {
#             console.error('Data should be an array');
#             process.exit(1);
#           }
#           console.log('Data validation passed:', data.length, 'records');
#           "

#   browser-test:
#     name: Basic Browser Test
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - uses: actions/setup-node@v4
#         with:
#           node-version: '18'
#       - run: npm install -g playwright
#       - run: playwright install
#       - run: |
#           cat > test.js << 'EOF'
#           const { chromium } = require('playwright');
#           async function testPage(url) {
#             const browser = await chromium.launch();
#             const page = await browser.newPage();
#             try {
#               await page.goto(url);
#               await page.waitForLoadState('networkidle');
#               const errors = await page.evaluate(() => {
#                 return window.performance.getEntriesByType('resource')
#                   .filter(r => r.name.includes('.js') || r.name.includes('.css'))
#                   .filter(r => r.responseStatus >= 400).length;
#               });
#               if (errors > 0) throw new Error(`Found ${errors} resource loading errors`);
#               console.log(`‚úÖ ${url} loaded successfully`);
#             } catch (error) {
#               console.error(`‚ùå Error testing ${url}:`, error.message);
#               process.exit(1);
#             } finally {
#               await browser.close();
#             }
#           }
#           async function runTests() {
#             const baseUrl = 'http://localhost:8000';
#             const pages = ['', '/data.html', '/about.html', '/faq.html'];
#             for (const page of pages) { await testPage(baseUrl + page); }
#           }
#           runTests();
#           EOF
#       - run: |
#           python3 -m http.server 8000 &
#           sleep 5
#           node test.js

#   deploy:
#     name: Deploy to GitHub Pages
#     runs-on: ubuntu-latest
#     needs:
#       - html-validation
#       - css-validation
#       - js-linting
#       - json-validation
#       - security
#       - file-size
#       - data-integrity
#       - browser-test
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     steps:
#       - uses: actions/checkout@v4
#       - name: Setup Pages
#         uses: actions/configure-pages@v4
#       - name: Upload artifact
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: '.'
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v4
#       - name: Deployment success
#         run: |
#           echo "üöÄ Deployment completed successfully!"
#           echo "Live URL: ${{ steps.deployment.outputs.page_url }}" 