name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and Deploy
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run validation checks
        run: |
          echo "üîç Running validation checks..."
          npm run validate:json
          npm run validate:data
          npm run lint:html
          echo "‚úÖ All validation checks passed"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Post-deployment checks
  post-deploy-checks:
    name: Post-deployment Checks
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: npm install -g playwright

      - name: Install browsers
        run: playwright install

      - name: Wait for deployment
        run: sleep 30

      - name: Test deployed site
        run: |
          cat > test-deployed.js << 'EOF'
          const { chromium } = require('playwright');
          
          async function testDeployedSite() {
            const browser = await chromium.launch();
            const page = await browser.newPage();
            
            try {
              const baseUrl = '${{ needs.deploy.outputs.page_url }}';
              const pages = ['', '/data.html', '/about.html', '/faq.html'];
              
              for (const pagePath of pages) {
                const url = baseUrl + pagePath;
                console.log(`Testing: ${url}`);
                
                await page.goto(url);
                await page.waitForLoadState('networkidle');
                
                // Check for JavaScript errors
                const errors = await page.evaluate(() => {
                  return window.performance.getEntriesByType('resource')
                    .filter(r => r.name.includes('.js') || r.name.includes('.css'))
                    .filter(r => r.responseStatus >= 400).length;
                });
                
                if (errors > 0) {
                  throw new Error(`Found ${errors} resource loading errors on ${url}`);
                }
                
                // Check if page title is present
                const title = await page.title();
                if (!title || title.trim() === '') {
                  throw new Error(`Missing page title on ${url}`);
                }
                
                console.log(`‚úÖ ${url} - Title: "${title}"`);
              }
              
              console.log('üéâ All deployed pages tested successfully!');
            } catch (error) {
              console.error('‚ùå Deployment test failed:', error.message);
              process.exit(1);
            } finally {
              await browser.close();
            }
          }
          
          testDeployedSite();
          EOF
          
          node test-deployed.js

      - name: Comment deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ needs.deploy.outputs.page_url }}';
            const runId = context.runId;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number || 0,
              body: `üöÄ **Deployment Successful!**\n\nYour changes have been deployed to GitHub Pages.\n\n- **Live URL**: ${deploymentUrl}\n- **Deployment ID**: ${runId}\n- **Status**: ‚úÖ All post-deployment checks passed\n\nThe website is now live and accessible to users.`
            }); 